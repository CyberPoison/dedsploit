#!/usr/bin/env python
from core import *
from modules import http, net, smtp

# Ensure that the user has root privileges!
if not os.geteuid() == 0:
    sys.exit(R + "[!] You are not root! [!]" + W )

# Recommendation platform: Linux
if platform.system() != "Linux":
    print R + "[!] You are not using Linux! dedsploit may not work! [!]" + W

# Available modules in the form of a dict
modules = {
    "http": ["slowloris"],
    "net": ["arpspoof", "pscan", "hosts"],
    "smtp": ["smsbomb"]
}

# Display visually appealing output!

header = C + """
    .___         .___             .__         .__  __
  __| _/____   __| _/____________ |  |   ____ |__|/  |_
 / __ |/ __ \ / __ |/  ___/\____ \|  |  /  _ \|  \   __|
/ /_/ \  ___// /_/ |\___ \ |  |_> >  |_(  <_> )  ||  |
\____ |\___  >____ /____  >|   __/|____/\____/|__||__|
     \/    \/     \/    \/ |__|                         
http://dedsploit.tech\n""" + W

# Print authors, versions and available modules/attack vectors
version = LG + """\n
         [   Written By: the dedsploit team     ]
         [   Version: 3.0.0                     ]
         [   Modules: %s                         ]\n""" % len(modules) + W

# Output info based on network
netinfo = """
		> Local IP Address: %s                > Gateway IP: %s
		> MAC Address: %s
		""" % (str(lan_ip), str(gateway_ip), str(mac_address))

print header, version, netinfo

# Returns values from each sublist within a dict

def get_key(value):
    return next(key for key, lst in modules.iteritems() for item in lst if item == value)

# Main entry point

def main():
    print LC + "Type in a command. For system commands, type 'help'.\nFor available modules, type 'modules'. Exit with Ctrl + C or 'exit'.\n"
    while True:
        options = raw_input(LP + "[>>] " + W )
        if options == "help":
            print_command_help(help_options)
            continue
        elif options == "modules":
            print LR + "\n[There are currently """ + LP + "{}".format(sum(len(lst) for lst in modules.values())) + LR + " modules available:]\n" + LG
            # Iterate over each key value in the modules dict
            for protocol, module_list in modules.items():
                # For each item in each sublist, print
                for mod in module_list:
                    print "{}\t\t({})".format(str(mod), str(protocol))        
            print "\n"
            continue
        elif options == "clear":
            os.system("clear")
            continue
        elif options == "exit":
            raise EOFError
        elif options.startswith("use"):
            modname = options.split()[1]
            # return a list of all concatenated sublists
            mod_list = [name for lst in modules.values() for name in lst]
            if modname in mod_list:
                print LISTMSG
                protocol = get_key(modname)
                if protocol == "http":
                    h = http.HTTP(modname).execute()
                elif protocol == "net":
                    n = net.Net(modname).execute()
                elif protocol == "smtp":
                    s = smtp.SMTP(modname).execute()
            else:
                print WARNING
        else:
            print WARNING
            continue

if __name__ == "__main__":
    try:
        main()
    except (KeyboardInterrupt, EOFError):
        print LR + "\n[!] Goodbye! Remember to Hack the Gibson!" + W
        exit()
    except IndexError:
        print R + "[!] Module not found! [!]"